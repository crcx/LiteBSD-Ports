Basic Installation
==================

These are installation instructions for ce.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It
uses those values to create a `Makefile' in the build directory. 
It also creates a `config.h' file containing system-dependent
definitions.  Finally, it creates a shell script named
`config.status' that you can run in the future to recreate the
current configuration, a file `config.cache' that saves the
results of its tests to speed up reconfiguring, and a file
`config.log' containing compiler output (useful mainly for
debugging `configure').  If at some point `config.cache' contains
results you don't want to keep, you may remove or edit it. 

If you need to do unusual things to compile the package, please
try to figure out how `configure' could check whether or not to
do them, and mail diffs or instructions to `chet@po.cwru.edu' so
they can be considered for the next release. 

The file `configure.in' is used to create `configure' by a
program called Autoconf.  You only need `configure.in' if you
want to change it or regenerate `configure' using a newer version
of Autoconf.  If you do this, make sure you are using Autoconf
version 2.10 or newer. 

The simplest way to compile ce is:

  1. `cd' to the directory containing the source code and type
     `./configure' to configure ce for your system.  If you're using
     `csh' on an old version of System V, you might need to type `sh
     ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile ce.

  3. Type `make install' to install `ce', `xce' and `teach-ce'.

  4. Type `make doc-install' to install the help files and manual pages.

You can remove the program binaries and object files from the source
code directory by typing `make clean'.  To also remove the files that
`configure' created (so you can compile ce for a different kind of
computer), type `make distclean'.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:

     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

On systems that have the `env' program, you can do it like this:

     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

The configuration process uses GCC to build ce if it is available.

Compiling For Multiple Architectures
====================================

You can compile ce for more than one kind of computer at the same
time, by placing the object files for each architecture in their own
directory.  To do this, you must use a version of `make' that supports
the `VPATH' variable, such as GNU `make'.  `cd' to the directory where
you want the object files and executables to go and run the `configure'
script from the source directory.  You may need to supply the
`--srcdir=PATH' argument to tell `configure' where the source files
are.  `configure' automatically checks for the source code in the
directory that `configure' is in and in `..'.

If you have to use a `make' that does not supports the `VPATH'
variable, you can compile ce for one architecture at a time in the
source code directory.  After you have installed ce for one
architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

By default, `make install' will install into `/usr/local/bin',
`/usr/local/man', etc.  You can specify an installation prefix other
than `/usr/local' by giving `configure' the option `--prefix=PATH'.

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
`PATH' as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

Specifying the System Type
==========================

There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  `TYPE' can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
`CPU-COMPANY-SYSTEM' (e.g., `sparc-sun-sunos4.1.2').

See the file `support/config.sub' for the possible values of each field.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.  `configure'
looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: the ce `configure' looks for a site script, but not all
`configure' scripts do.

Operation Controls
==================

`configure' recognizes the following options to control how it operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the ce source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely used, boilerplate
options.

Optional Features
=================

The ce `configure' has a number of `--with-PACKAGE' options,
where PACKAGE is something like `ce-malloc' or `purify' (for the
Purify memory allocation checker).  To turn off the default use
of a package, use `--without-PACKAGE'.

Here is a complete list of the `--with-' options that the ce
`configure' recognizes. 

`--with-ce-malloc'
    Use the ce version of `malloc' in `malloc.c'.  This is a version
    derived from the 4.2 BSD `malloc'.  This `malloc' is very fast,
    but wastes some space.  This option is enabled by default.  The
    `configure' script turns this option off for a number of systems.

`--with-curses'
     Use the curses library instead of the termcap library.  This should
     be supplied if your system has an inadequate or incomplete termcap
     database.

`--with-purify'
     Define this to use the Purify memory allocation checker from Pure
     Software.
